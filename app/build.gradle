apply plugin: 'com.android.application'

//赋值与引用
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion

    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 这个方法接收3个非空的参数，第一个：确定值的类型；第二个：指定key的名字；第三个：传值（必须是String）
        // 为什么需要定义这个？--> 因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildType节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //循环引入第三方库
    support.each { k, v -> implementation v}

    //公共基础库
    implementation project(':common')

    //如果是集成化模式，进行发布版本时，各个模块都不能独立运行了
    if(isRelease) {
        implementation project(':order')
        implementation project(':personal')
    }

}